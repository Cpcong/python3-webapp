server {
    # 监听端口
    listen 80;

    root /srv/awesome/www;
    access_log /srv/awesome/log/access_log;
    error_log  /srv/awesome/log/error_log;

    client_max_body_size 1m;# 允许客户端请求的最大单文件字节数

    gzip on;# 开启 gzip 模块

    # 设置允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取。默认值是0，不管页面多大都压缩。建议设置成大于1k的字节数，小于1k可能会越压越大。
    gzip_min_length 1024;

    # 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 8k代表以8k为单位，按照原始数据大小以8k为单位的4倍申请内存
    gzip_buffers 4 8k;

    # 匹配MIME类型进行压缩
    gzip_types text/css application/x-javascript application/json;

    sendfile on;

    # 处理静态文件/favicon.ico:
    location /favicon.ico{
        root /srv/awesome/www;
    }

    # 处理静态资源:
    # ~:区分大小写的匹配
    # ^: 匹配字符串的开始
    # .:匹配除换行符以外的任意字符
    # $.: 匹配字符串的结束
    location ~ ^\/static\/.*$ {
        root /srv/awesome/www;
    }

    # 动态请求转发到9000端口:
    # 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求
    # 但是正则和最长字符串会优先匹配
    location / {
        proxy_pass http://127.0.0.1:9000;
        proxy_set_header X-Real-IP $remote_addr;# X-Real-IP存放用户真实IP
        proxy_set_header Host %host;
        proxy_set_header X-Forwarder-For $proxy_add_x_forwarded_for; # 每次经过proxy转发都会有记录,格式就是client1, proxy1, proxy2,以逗号隔开各个地址
    }
}